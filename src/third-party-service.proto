syntax = "proto3";

package third_party_service;
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

message Empty {}

message User {
  string name = 1;
  string email = 2;
  string role = 3;
  string userId = 4;
  string moodleId = 5;
  int32 status = 6;
}

message Course {    
  string name = 1;
  string moodleId =2;
  string courseMoodleId =3 ;
  string startAt =4;
  string endAt = 5;
  string detail = 6;
  string summary = 7;
  string categoryId = 8;
}

message Assignment {    
  string name = 1;
  string dueDate = 2;
  bool status = 3 ;
  string courseId = 4;
  string description = 5;
  string attachmentFileLink = 6;
  string config = 7;
  string assignmentMoodleId = 8;
}

message Submission {    
  string assignmentId = 1;
  string link =2;
  string note =3 ;
  string submitType =4;
  string timemodified=5;
  string userId = 6;
  string origin = 7;
  string status = 8;
  int32 grade = 9;
  string submissionMoodleId=10;
}

message ScanSubmissionRequest {    
  string id = 1;
  string assignmentId = 2;
  string link = 3;
  string note = 4;
  string submitType = 5;
  string timemodified = 6;
  string userId = 7;
  string origin = 8;
  int32 status = 9;
  int32 grade = 10;
  string submissionMoodleId = 11;
  string createdAt = 12;
  string updatedAt = 13;
  string deletedAt = 14;
}

message GetUsersRequest {
  repeated string emails = 1;
}

message UsersResponse {
  int32 error = 1;
  repeated User data = 2;
  string message = 3;
}

message GetCourseOfUserRequest {
  int32 userMoodleId = 1;
}

message CourseUserRequest {
  int32 courseMoodleId = 1;
}

message GetAssignmentsOfCourseRequest {
  int32 courseMoodleId = 1;
}

message GetSubmissionsOfAssignmentMoodleIdRequest {
  int32 assignmentMoodleId = 1;
}

message GetCourseOfCategoryRequest {
  int32 categoryMoodleId = 1;
}

message GetCourseOfMoodleIdRequest {
  int32 courseMoodleId = 1;
}

message CoursesResponse {
  int32 error = 1;
  repeated Course data = 2;
  string message = 3;
}

message AssignmentsResponse {
  int32 error = 1;
  repeated Assignment data = 2;
  string message = 3;
}

message SubmissionsResponse {
  int32 error = 1;
  repeated Submission data = 2;
  string message = 3;
}

message Categories{
  string name = 1;
  int32 categoryMoodleId = 2;
}

message CategoriesResponse {
  int32 error = 1;
  repeated Categories data = 2;
}

message AssignmentCronjobRequest {
  string id = 1;
  int32 assignmentMoodleId = 2;
  string dueDate = 3;
}

message AssignmentsCronjobRequest {
  repeated AssignmentCronjobRequest assignments = 1;
}

message CourseCronjobRequest {
  string id = 1;
  int32 moodleId = 2;
  int64 endAt = 3;
}

message TextRange {
  int32 startLine = 1;
  int32 endLine = 2;
  int32 startOffset = 3;
  int32 endOffset = 4;
}

message IssueDetail {
  string key = 1;
  string rule = 2;
  string severity = 3;
  string component = 4;
  string project = 5;
  int32 line = 6;
  string hash = 7;
  TextRange textRange = 8;
  string status = 9;
  string message = 10;
  string effort = 11;
  string debt = 12;
  string creationDate = 13;
  string updateDate = 14;
  string type = 15;
  string scope = 16;
}

message ComponentDetail {
  string key = 1;
  bool enabled = 2;
  string qualifier = 3;
  string name = 4;
  string longName = 5;
  string path = 6;
}

message RuleOverview {
  string key = 1;
  string lang = 2;
  string langName = 3;
  string name = 4;
  string status = 5;
}

message Issue {
  int32 total = 1;
  int32 p = 2;
  int32 ps = 3;
  int32 effortTotal = 4;
  repeated IssueDetail issues = 5;
  repeated ComponentDetail components = 6;
  repeated RuleOverview rules = 7;

}

message IssueRequest {
  string submissionId = 1;
  string type = 2;
  string severity = 3;
  string rule = 4;
  string file = 5;
  int32 page = 6;
  int32 pageSize = 7;
}

message IssueResponse {
  int32 error = 1;
  Issue data = 2;
  string message = 3;
}

message Source {
  int32 line = 1;
  string code = 2;
}

message SourceRequest {
  string key = 1;
}

message SourceResponse {
  int32 error = 1;
  repeated Source data = 2;
  string message = 3;
}

message RuleDetail{
  string key = 1;
  string repo = 2;
  string lang = 3;
  string langName = 4;
  string name = 5;
  string type = 6;
  string severity = 7;
  string debtRemFnOffset = 8;
  string htmlDesc = 9;
  string mdDesc = 10;
  string status = 11;
  string scope = 12;
  string createdAt = 13;
}

message RuleRequest {
  string key = 1;
}

message RuleResponse {
  int32 error = 1;
  RuleDetail data = 2;
  string message = 3;
}

message History {
  string date = 1;
  string value = 2;
}

message Measure {
  string metric = 1;
  repeated History history = 2;
}

message Paging {
  int32  pageIndex = 1;
  int32  pageSize = 2;
  int32  total = 3;
}

message Result {
  Paging paging = 1;
  repeated Measure measures = 2;
}

message ResultRequest {
  string submissionId = 1;
  int32 page = 2;
  int32 pageSize = 3;
}

message ResultResponse {
  int32 error = 1;
  Result data = 2;
  string message = 3;

}

message Condition {
  string key = 1;
  int32 error = 2;
}

message QualityGateRequest {
  string assignmentId = 1;
  repeated Condition conditions = 2;
}

message QualityGateResponse {
  int32 error = 1;
  string data = 2;
  string message = 3;
}


service GSonarqubeService{
  rpc getRuleDetailByKey(RuleRequest) returns (RuleResponse);
  rpc getResultsBySubmissionId(ResultRequest) returns (ResultResponse);
  rpc getSourcesByKey(SourceRequest) returns (SourceResponse);
  rpc getIssuesBySubmissionId(IssueRequest) returns (IssueResponse);
  rpc createQualityGate(QualityGateRequest) returns (QualityGateResponse);
  rpc updateConditions(QualityGateRequest) returns (QualityGateResponse);
}

service GCategoryService {
  rpc GetAllCategories(Empty) returns (CategoriesResponse);
}

service GAssignmentService {
  rpc GetAllAssignmentsByCourseId(GetAssignmentsOfCourseRequest) returns (AssignmentsResponse);
  rpc AddAssignmentCronjob(AssignmentsCronjobRequest) returns (Empty);
}

service GSubmissionService {
  rpc GetSubmissionsByAssignmentId(GetSubmissionsOfAssignmentMoodleIdRequest) returns (SubmissionsResponse);
  rpc ScanSubmission(ScanSubmissionRequest) returns (Empty);
}

service GUserService {
  rpc GetUsersByEmails(GetUsersRequest) returns (UsersResponse);
  rpc GetAllUsers(Empty) returns (UsersResponse);
  rpc GetUsersByCourseMoodleId(CourseUserRequest) returns (UsersResponse);
}

service GCourseService {
  rpc GetAllCourses(Empty) returns (CoursesResponse);
  rpc GetUsersCourse(GetCourseOfUserRequest) returns (CoursesResponse);
  rpc GetCoursesByCategory(GetCourseOfCategoryRequest) returns (CoursesResponse);
  rpc GetCoursesByMoodleId(GetCourseOfMoodleIdRequest) returns (CoursesResponse);
  rpc AddCourseCronjob(CourseCronjobRequest) returns (Empty);
}