syntax = "proto3";

package third_party_service;
import "google/protobuf/any.proto";

message Empty {}

message User {
  string name = 1;
  string email = 2;
  string role = 3;
  string userId = 4;
  string moodleId = 5;
  bool status = 6;
}

message Course {    
  string name = 1;
  string moodleId =2;
  int32 courseMoodleId =3 ;
  string startAt =4;
  string endAt = 5;
  string detail = 6;
  string summary = 7;
  string categoryId = 8;
}

message Assignment {    
  string name = 1;
  string dueDate = 2;
  bool status = 3 ;
  string courseId = 4;
  string description = 5;
  string attachmentFileLink = 6;
  string config = 7;
  string assignmentMoodleId = 8;
}

message Submission {    
  string assignmentId = 1;
  string link =2;
  string note =3 ;
  string submitType =4;
  string timemodified=5;
  string userId = 6;
  string origin = 7;
  string status = 8;
  int32 grade = 9;
  string submissionMoodleId=10;
}

message GetUsersRequest {
  repeated string emails = 1;
}

message UsersResponse {
  int32 error = 1;
  repeated User data = 2;
  string message = 3;
}

message GetCourseOfUserRequest {
  int32 userMoodleId = 1;
}

message GetAssignmentsOfCourseRequest {
  int32 courseMoodleId = 1;
}

message GetSubmissionsOfAssignmentMoodleIdRequest {
  int32 assignmentMoodleId = 1;
}

message GetCourseOfCategoryRequest {
  int32 categoryMoodleId = 1;
}

message GetCourseOfMoodleIdRequest {
  int32 courseMoodleId = 1;
}

message CoursesResponse {
  int32 error = 1;
  repeated Course data = 2;
  string message = 3;
}

message AssignmentsResponse {
  int32 error = 1;
  repeated Assignment data = 2;
  string message = 3;
}

message SubmissionsResponse {
  int32 error = 1;
  repeated Submission data = 2;
  string message = 3;
}

message Categories{
  string name = 1;
  int32 categoryMoodleId = 2;
}

message CategoriesResponse {
  int32 error = 1;
  repeated Categories data = 2;
}

message AssignmentCronjobRequest {
  string id = 1;
  int32 assignmentMoodleId = 2;
  string dueDate = 3;
}

message AssignmentsCronjobRequest {
  repeated AssignmentCronjobRequest assignments = 1;
}

message TextRange {
  int32 startLine = 1;
  int32 endLine = 2;
  int32 startOffset = 3;
  int32 endOffset = 4;
}

message IssueDetail {
  string key = 1;
  string rule = 2;
  string severity = 3;
  string component = 4;
  string project = 5;
  int32 line = 6;
  string hash = 7;
  TextRange textRange = 8;
  string status = 9;
  string message = 10;
  string effort = 11;
  string debt = 12;
  string creationDate = 13;
  string updateDate = 14;
  string type = 15;
  string scope = 16;
}

message ComponentDetail {
  string key = 1;
  bool enabled = 2;
  string qualifier = 3;
  string name = 4;
  string longName = 5;
  string path = 6;
}

message Issue {
  int32 total = 1;
  int32 p = 2;
  int32 ps = 3;
  int32 effortTotal = 4;
  repeated IssueDetail issues = 5;
  repeated ComponentDetail components = 6;
}

message IssueRequest {
  string submissionId = 1;
  string type = 2;
  int32 page = 3;
  int32 pageSize = 4;
}

message IssueResponse {
  int32 error = 1;
  Issue issues = 2;
}

message Source {
  int32 line = 1;
  string code = 2;
}

message SourceRequest {
  string key = 1;
}

message SourceResponse {
  int32 error = 1;
  repeated Source sources = 2;
}

service GIssueService {
  rpc getIssuesBySubmissionId(IssueRequest) returns (IssueResponse);
}

service GSourceService {
  rpc getSourcesByKey(SourceRequest) returns (SourceResponse);
}
service GCategoryService {
  rpc GetAllCategories(Empty) returns (CategoriesResponse);
}

service GAssignmentService {
  rpc GetAllAssignmentsByCourseId(GetAssignmentsOfCourseRequest) returns (AssignmentsResponse);
  rpc AddAssignmentCronjob(AssignmentsCronjobRequest) returns (Empty);
}

service GSubmissionService {
  rpc GetSubmissionsByAssignmentId(GetSubmissionsOfAssignmentMoodleIdRequest) returns (SubmissionsResponse);
}

service GUserService {
  rpc GetUsersByEmails(GetUsersRequest) returns (UsersResponse);
  rpc GetAllUsers(Empty) returns (UsersResponse);
}

service GCourseService {
  rpc GetAllCourses(Empty) returns (CoursesResponse);
  rpc GetUsersCourse(GetCourseOfUserRequest) returns (CoursesResponse);
  rpc GetCoursesByCategory(GetCourseOfCategoryRequest) returns (CoursesResponse);
  rpc GetCoursesByMoodleId(GetCourseOfMoodleIdRequest) returns (CoursesResponse);
}